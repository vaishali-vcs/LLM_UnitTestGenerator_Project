{"task_id": "1", "function_to_test": "remove_chars", "generate": "no","question": "def remove_chars(word, n):\n   # Remove first n characters from a string\n    print('Original string:', word)\n    x = word[n:]\n    return x"}
{"task_id": "2", "function_to_test": "checkPrime", "generate": "no", "question": "def checkPrime(max_num):\n    \"\"\"\n    Check whether the given number is prime or not\n    \"\"\"\n    for num in range (2, max_num):\n        if max_num % num == 0:\n            return False\n    return True"}
{"task_id": "3", "function_to_test": "factorial",  "generate": "", "question": "def factorial(num):\n    \"\"\"\n    Returns the factorial of a number\n    \"\"\"\n    \n    if num == 1:\n        return num\n    return num * factorial(num-1)\n"}
{"task_id": "4", "function_to_test": "first_last_same",  "generate": "no", "question": "def first_last_same(numberList):\n    # Check if the first and last number of a list is the same\n    print(\"Given list:\", numberList)\n    \n    first_num = numberList[0]\n    last_num = numberList[-1]\n    \n    if first_num == last_num:\n        return True\n    else:\n        return False"}
{"task_id": "5", "function_to_test": "extract_number",  "generate": "no", "question": "def extract_number(number):\n    # Write a Program to extract each digit from an integer in the reverse order.\n    print(\"Given number\", number)\n    while number > 0:\n        # get the last digit\n        digit = number % 10\n        # remove the last digit and repeat the loop\n        number = number // 10\n        print(digit, end=\" \")"}
{"task_id": "6", "function_to_test": "exp",  "generate": "no", "question": "def exp(num, power):\n    \"\"\"\n    Returns the exponent of a given number with power\n    \"\"\"\n    if power == 0:\n        return 1\n    if num == 0:\n        return 0\n    answer = num\n    increment = num\n    \n    for i in range(1, power):\n        for j in range(1, num):\n            answer += increment\n        increment = answer\n    return answer"}
{"task_id": "7", "function_to_test": "cubesum",  "generate": "no", "question": "def cubesum(num):\n    \"\"\"\n    Returns the sum of cube of each digit of a given number\n    \"\"\"\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += exp(digit, 3) # digit ** 3\n        temp //= 10\n    return sum"}
{"task_id": "8", "function_to_test": "prodDigit", "generate": "no", "question": "def prodDigit(num):\n    \"\"\"\n    Returns the product of digits of given number\n    \"\"\"\n    temp = num\n    prod = 1\n    while temp > 0:\n        digit = temp % 10\n        prod *= digit\n        temp //= 10\n    return prod"}
{"task_id": "9", "function_to_test": "pig_latin", "generate": "no", "question": "def pig_latin(text):\n    def translate(word):\n        vowels = 'aeiou'\n        if word[0] in vowels:\n            return word + 'way'\n        else:\n            consonants = ''\n            for letter in word:\n                if letter not in vowels:\n                    consonants += letter\n                else:\n                    break\n            return word[len(consonants):] + consonants + 'ay'\n\n    words = text.lower().split()\n    translated_words = [translate(word) for word in words]\n    return ' '.join(translated_words)"}
{"task_id": "10", "function_to_test": "is_palindrome", "generate": "no", "question": "def is_palindrome(s):\n    return s == s[::-1]"}
{"task_id": "11", "function_to_test": "rev_sentence", "generate": "no", "question": "def rev_sentence(sentence): \n   # Function to reverse words of string  \n    # first split the string into words \n    words = sentence.split(' ') \n \n    # then reverse the split string list and join using space \n    reverse_sentence = ' '.join(reversed(words)) \n \n    # finally return the joined string \n    return reverse_sentence "}
{"task_id": "12", "function_to_test": "power", "generate": "no", "question": "def power(a,b):\n  # a function to calculate power of a number raised to other. \n  if b == 1:\n    return a\n  else:\n    return a*power(a,b-1)"}
{"task_id": "13", "function_to_test": "addNumbers", "generate": "no", "question": "def addNumbers(x,y):\n    # function that accepts two numbers as arguments and returns the sum\n    sum = x + y\n    return sum"}
{"task_id": "14", "function_to_test": "area_circle", "generate": "no", "question": "def area_circle(radius):\n    # Function to Compute the Area of a Circle\n    pi = 3.14159\n    area = pi * radius**2\n    return area"}
{"task_id": "15", "function_to_test": "area_cylinder", "generate": "no", "question": "def area_cylinder(radius,height):\n    # Function to compute area of cylinder\n    circle_area = area_circle(radius)\n    height_area = 2 * radius * math.pi * height\n    return 2*circle_area + height_area\n"}
{"task_id": "16", "function_to_test": "find_square", "generate": "no", "question": "def find_square(num):\n    # function to find square of a number\n    result = num * num\n    return result"}
{"task_id": "17", "function_to_test": "findRotations", "generate": "no", "question": "def findRotations(str):\n    # function to find the minimum number of rotations required to get the same string.\n    tmp = str + str\n    n = len(str)\n \n    for i in range(1, n + 1):\n        # substring from i index of \n        # original string size.\n        substring = tmp[i: i+n]\n \n        # if substring matches with \n        # original string then we will \n        # come out of the loop.\n        if (str == substring):\n            return i\n    return n\n "}
{"task_id": "18", "function_to_test": "test_duplicate", "generate": "no", "question": "def test_duplicate(array_nums):\n    # Find whether a given array of integers contains any duplicate element\n    nums_set = set(array_nums)    \n    return len(array_nums) != len(nums_set)     "}
{"task_id": "19", "function_to_test": "printMultiples", "generate": "no", "question": "def printMultiples(n, m):\n  'takes n and m as integers and finds all first m multiples of n'\n  for m in (n,m):\n      if n % 2 == 0:\n          while n < 0:\n              print(n)"}
{"task_id": "20", "function_to_test": "sumOfList", "generate": "no", "question": "def sumOfList(list, size):\n   # find sum of all elements in list using recursion\n    if (size == 0):\n        return 0\n    else:\n        return list[size - 1] + sumOfList(list, size - 1)"}
{"task_id": "21", "function_to_test": "compute_tax", "generate": "no", "question": "def compute_tax(income):\n    \"\"\"Calculate income tax for the given income by adhering to the rules below\n    0% tax for First $10,000. 10% for Next $10,000 and 20% for the remaining\n    \"\"\"\n    print(\"Given income\", income)\n    tax_payable = 0\n\n    if income <= 10000:\n        tax_payable = 0\n    elif income <= 20000:\n        # no tax on first 10,000\n        x = income - 10000\n        # 10% tax\n        tax_payable = x * 10 / 100\n    else:\n        # first 10,000\n        tax_payable = 0\n\n        # next 10,000 10% tax\n        tax_payable = 10000 * 10 / 100\n\n        # remaining 20%tax\n        tax_payable += (income - 20000) * 20 / 100\n\n    print(\"Total tax to pay is\", tax_payable)\n"}
{"task_id": "22", "function_to_test": "exponent", "generate": "no", "question": "def exponent(base, exp):\n   # Write a function that returns an int value of base raises to the power of exp.\n    num = exp\n    result = 1\n    while num > 0:\n        result = result * base\n        num = num - 1\n    print(base, \"raises to the power of\", exp, \"is: \", result)"}
{"task_id": "23", "function_to_test": "printPrimeNumbersInRange", "generate": "no",  "question": "def printPrimeNumbersInRange(start, end):\n    # Write a program to display all prime numbers within a range\n    print(\"Prime numbers between\", start, \"and\", end, \"are:\")\n\n    for num in range(start, end + 1):\n        # all prime numbers are greater than 1\n        # if number is less than or equal to 1, it is not prime\n        if num > 1:\n            for i in range(2, num):\n                # check for factors\n                if (num % i) == 0:\n                    # not a prime number so break inner loop and\n                    # look for next number\n                    break\n            else:\n                print(num)"}
{"task_id": "24", "function_to_test": "fibonacci", "generate": "no", "question": "def fibonacci(nrange=2):\n    # Display Fibonacci series\n    # first two numbers\n    num1, num2 = 0, 1\n\n    print(\"Fibonacci sequence:\")\n    # run loop 10 times\n    for i in range(nrange):\n        # print next number of a series\n        print(num1, end=\"  \")\n        # add last two numbers to get next number\n        res = num1 + num2\n\n        # update values\n        num1 = num2\n        num2 = res"}
{"task_id": "25", "function_to_test": "reverseNumbers", "generate": "no", "question": "def reverseNumbers(num):\n    # Reverse a given integer number\n    reverse_number = 0\n    print(\"Given Number \", num)\n    while num > 0:\n        reminder = num % 10\n        reverse_number = (reverse_number * 10) + reminder\n        num = num // 10\n    print(\"Reverse Number \", reverse_number)"}
{"task_id": "26", "function_to_test": "printOddIndexNumbers", "generate": "no", "question": "def printOddIndexNumbers(numlist):\n   # se a loop to display elements from a given list present at odd index positions\n    for i in numlist[1::2]:\n        print(i, end=\" \")"}
{"task_id": "27", "function_to_test": "calculateCubes", "generate": "no", "question": "def calculateCubes(input_number):\n    # Calculate the cube of all numbers from 1 to a given number\n    for i in range(1, input_number + 1):\n        print(\"Current Number is :\", i, \" and the cube is\", (i * i * i))"}
{"task_id": "28", "function_to_test": "get_middle_three_chars", "generate": "no", "question": "def get_middle_three_chars(str1):\n    # Create a string made of the middle three characters\n    print(\"Original String is\", str1)\n\n    # first get middle index number\n    mi = int(len(str1) / 2)\n\n    # use string slicing to get result characters\n    res = str1[mi - 1:mi + 2]\n    print(\"Middle three chars are:\", res)"}
{"task_id": "29", "function_to_test": "find_digits_chars_symbols", "generate": "no", "question": "def find_digits_chars_symbols(sample_str):\n    # Count all letters, digits, and special symbols from a given string\n    char_count = 0\n    digit_count = 0\n    symbol_count = 0\n    for char in sample_str:\n        if char.isalpha():\n            char_count += 1\n        elif char.isdigit():\n            digit_count += 1\n        # if it is not letter or digit then it is special symbol\n        else:\n            symbol_count += 1\n\n    print(\"Chars =\", char_count, \"Digits =\", digit_count, \"Symbol =\", symbol_count)"}
{"task_id": "30", "function_to_test": "createMixString", "generate": "no", "question": "def createMixString(s1, s2):\n    \"\"\"\n    Given two strings, s1 and s2. Write a program to create a new string s3 made of the first char of s1,\n    then the last char of s2, Next, the second char of s1 and second last char of s2, and so on. Any leftover chars\n    go at the end of the result.\"\"\"\n    # get string length\n    s1_length = len(s1)\n    s2_length = len(s2)\n\n    # get length of a bigger string\n    length = s1_length if s1_length > s2_length else s2_length\n    result = \"\"\n\n    # reverse s2\n    s2 = s2[::-1]\n\n    # iterate string\n    # s1 ascending and s2 descending\n    for i in range(length):\n        if i < s1_length:\n            result = result + s1[i]\n        if i < s2_length:\n            result = result + s2[i]\n\n    print(result)"}
{"task_id": "31", "function_to_test": "mergeDictionaries", "generate": "no", "question": "def mergeDictionaries(dict1, dict2):\n   # Merge two Python dictionaries into one\n    dict3 = {**dict1, **dict2}\n    print(dict3)"}
{"task_id": "32", "function_to_test": "concatenateLists", "generate": "no", "question": "def concatenateLists(list1, list2):\n    # Concatenate two lists index-wise\n    list3 = [i + j for i, j in zip(list1, list2)]\n    print(list3)"}
{"task_id": "33", "function_to_test": "turnItemtoSquare", "generate": "no", "question": "def turnItemtoSquare(numbers):\n    # Turn every item of a list into its square\n    res = []\n    for i in numbers:\n        # calculate square and add to the result list\n        res.append(i * i)\n    print(res)"}
{"task_id": "34", "function_to_test": "remove_value", "generate": "no", "question": "def remove_value(sample_list, val):\n    #Remove all occurrences of a specific item from a list.\n    return [i for i in sample_list if i != val]"}
{"task_id": "35", "function_to_test": "setCommonElements", "generate": "no", "question": "def setCommonElements(set1, set2):\n    \"\"\" Check if two sets have any elements in common. If yes, display the common elements \"\"\"\n    if set1.isdisjoint(set2):\n        print(\"Two sets have no items in common\")\n    else:\n        print(\"Two sets have items in common\")\n        print(set1.intersection(set2))"}
{"task_id": "36", "function_to_test": "UpdateSet", "generate": "no", "question": "def UpdateSet(set1, set2):\n    # Update set1 by adding items from set2, except common items\n    set1.intersection_update(set2)\n    print(set1)"}
{"task_id": "37", "function_to_test": "reverseTuple", "generate": "no", "question": "def reverseTuple(tuple1):\n    # Reverse the tuple\n    tuple1 = tuple1[::-1]\n    print(tuple1)"}
{"task_id": "38", "function_to_test": "checkSameItems", "generate": "no", "question": "def checkSameItems(tuple1):\n    # Check if all items in the tuple are the same\n    print(all(i == tuple1[0] for i in tuple1))"}
{"task_id": "39", "function_to_test": "RandomLotteryPicker", "generate": "no", "question": "import random\ndef RandomLotteryPicker():\n    \"\"\" Random Lottery Pick. Generate 100 random lottery tickets and pick two lucky tickets from it as a winner\"\"\"\n    lottery_tickets_list = []\n    print(\"creating 100 random lottery tickets\")\n    # to get 100 ticket\n    for i in range(100):\n        # ticket number must be 10 digit (1000000000, 9999999999)\n        lottery_tickets_list.append(random.randrange(1000000000, 9999999999))\n    # pick 2 luck tickets\n    winners = random.sample(lottery_tickets_list, 2)\n    print(\"Lucky 2 lottery tickets are\", winners)"}
{"task_id": "40", "function_to_test": "generate3IntegersDivisibleBy5", "generate": "no", "question": "import random\ndef generate3IntegersDivisibleBy5():\n    # Generate 3 random integer number between 100 and 999 divisible by 5\n    print(\"Generating 3 random integer number between 100 and 999 divisible by 5\")\n    for num in range(3):\n        print(random.randrange(100, 999, 5), end=', ')" }
{"task_id": "41", "function_to_test": "pickRandomChar", "generate": "no", "question": "def pickRandomChar(name):\n    #Pick a random character from a given String\n    char = random.choice(name)\n    print(\"random char is \", char)"}
{"task_id": "42", "function_to_test": "randomString", "generate": "no", "question": "import random\nimport string\n\ndef randomString(stringLength):\n    \"\"\"Generate a random string of 5 charcters\"\"\"\n    letters = string.ascii_letters\n    print(''.join(random.choice(letters) for i in range(stringLength)))"}
{"task_id": "43", "function_to_test": "generateRandomPassword", "generate": "no", "question": "import random\nimport string\n\ndef generateRandomPassword():\n    \"\"\"\n    Generate a random Password which meets the following conditions\n    Password length must be 10 characters long.\n    It must contain at least 2 upper case letters, 1 digit, and 1 special symbol.\"\"\"\n    randomSource = string.ascii_letters + string.digits + string.punctuation\n    password = random.sample(randomSource, 6)\n    password += random.sample(string.ascii_uppercase, 2)\n    password += random.choice(string.digits)\n    password += random.choice(string.punctuation)\n\n    passwordList = list(password)\n    random.SystemRandom().shuffle(passwordList)\n    password = ''.join(passwordList)\n    print(password)"}
{"task_id": "44", "function_to_test": "multiplyRandomNumbers", "generate": "no", "question": "def multiplyRandomNumbers():\n    # Calculate multiplication of two random float numbers\n    num1  = random.random()\n    print(\"First Random float is \", num1)\n    num2 = random.uniform(9.5, 99.5)\n    print(\"Second Random float is \", num1)\n\n    num3 = num1 * num2\n    print(\"Multiplication is \", num3)"}
{"task_id": "45", "function_to_test": "getRandomDate", "generate": "no", "question": "import random\nimport time\ndef getRandomDate(startDate, endDate ):\n    # Generate a random date between given start and end dates\n    print(\"Printing random date between\", startDate, \" and \", endDate)\n    randomGenerator = random.random()\n    dateFormat = '%m/%d/%Y'\n\n    startTime = time.mktime(time.strptime(startDate, dateFormat))\n    endTime = time.mktime(time.strptime(endDate, dateFormat))\n\n    randomTime = startTime + randomGenerator * (endTime - startTime)\n    randomDate = time.strftime(dateFormat, time.localtime(randomTime))\n    print(\"Random Date = \", randomDate)"}
{"task_id": "46", "function_to_test": "checkLeapYear", "generate": "no", "question": "def checkLeapYear(year):\n    # Python program to check if year is a leap year or not\n\n    # To get year (integer input) from the user\n    # year = int(input(\"Enter a year: \"))\n\n    # divided by 100 means century year (ending with 00)\n    # century year divided by 400 is leap year\n    if (year % 400 == 0) and (year % 100 == 0):\n        print(\"{0} is a leap year\".format(year))\n\n    # not divided by 100 means not a century year\n    # year divided by 4 is a leap year\n    elif (year % 4 == 0) and (year % 100 != 0):\n        print(\"{0} is a leap year\".format(year))\n\n    # if not divided by both 400 (century year) and 4 (not century year)\n    # year is not leap year\n    else:\n        print(\"{0} is not a leap year\".format(year))"}
{"task_id": "47", "function_to_test": "checkTriangle", "generate": "no", "question": "def checkTriangle(x, y, z):\n    \"\"\"\n    Determine if a triangle is equilateral, isosceles, or scalene.\n    An equilateral triangle has all three sides the same length.   \n    An isosceles triangle has at least two sides the same length. (It is sometimes specified as having exactly two sides the same length, but for the purposes of this exercise we'll say at least two.)\n    A scalene triangle has all sides of different lengths.\n    \"\"\"\n    if x == y == z:\n        print(\"Equilateral triangle\")\n    elif x == y or y == z or z == x:\n        print(\"isosceles triangle\")\n    else:\n        print(\"Scalene triangle\")"}
{"task_id": "48", "function_to_test": "generateArmstrongNumbers", "generate": "no", "question": "def generateArmstrongNumbers(lower, upper):\n    \"\"\"\n    An Armstrong number is a number that is the sum of its own digits each raised to the power of the number of digits.\n    \"\"\"\n    for num in range(lower,upper + 1):\n       sum = 0\n       temp = num\n       while temp > 0:\n           digit = temp % 10\n           sum += digit ** 3\n           temp //= 10\n           if num == sum:\n                print(num)"}
{"task_id": "49", "function_to_test": "checkPangram", "generate": "yes", "question": "# import from string all ascii_lowercase and asc_lower\nfrom string import ascii_lowercase as asc_lower\n\ndef checkPangram(s):\n    # check if a sentence contains all the letters in the English alphabet.\n    if set(asc_lower) - set(s.lower()) == set([]):\n        print(\"The string is a pangram\")\n    else:\n         print(\"The string is not a pangram\")"}
{"task_id": "50", "function_to_test": "checkIsoGram", "generate": "no", "question": "def checkIsoGram(phrase):\n    \"\"\"The isogram is a string where the occurrence of each letter is exactly one. This code\n    checks if a phrase or string is isogram\n    \"\"\"\n    char_list = []\n    for char in phrase:\n        if char.isalpha():\n            if char in char_list:\n                return False\n                char_list.append(char)\n    return True"}