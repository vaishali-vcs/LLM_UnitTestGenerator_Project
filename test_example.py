# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import example as module_0


def test_case_0():
    int_0 = 535
    queue_0 = module_0.Queue(int_0)
    assert f"{type(queue_0).__module__}.{type(queue_0).__qualname__}" == "example.Queue"
    assert queue_0.max == 535
    assert queue_0.head == 0
    assert queue_0.tail == 0
    assert queue_0.size == 0
    assert (
        f"{type(queue_0.data).__module__}.{type(queue_0.data).__qualname__}"
        == "array.array"
    )
    assert len(queue_0.data) == 535
    var_0 = queue_0.dequeue()


def test_case_1():
    int_0 = -316
    with pytest.raises(AssertionError):
        module_0.Queue(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 535
    queue_0 = module_0.Queue(int_0)
    assert f"{type(queue_0).__module__}.{type(queue_0).__qualname__}" == "example.Queue"
    assert queue_0.max == 535
    assert queue_0.head == 0
    assert queue_0.tail == 0
    assert queue_0.size == 0
    assert (
        f"{type(queue_0.data).__module__}.{type(queue_0.data).__qualname__}"
        == "array.array"
    )
    assert len(queue_0.data) == 535
    none_type_0 = None
    queue_0.enqueue(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    queue_0 = module_0.Queue(bool_0)
    assert f"{type(queue_0).__module__}.{type(queue_0).__qualname__}" == "example.Queue"
    assert queue_0.max is True
    assert queue_0.head == 0
    assert queue_0.tail == 0
    assert queue_0.size == 0
    assert (
        f"{type(queue_0.data).__module__}.{type(queue_0.data).__qualname__}"
        == "array.array"
    )
    assert len(queue_0.data) == 1
    bool_1 = queue_0.empty()
    assert bool_1 is False
    float_0 = 1164.0
    module_0.Queue(float_0)


def test_case_4():
    bool_0 = True
    queue_0 = module_0.Queue(bool_0)
    assert f"{type(queue_0).__module__}.{type(queue_0).__qualname__}" == "example.Queue"
    assert queue_0.max is True
    assert queue_0.head == 0
    assert queue_0.tail == 0
    assert queue_0.size == 0
    assert (
        f"{type(queue_0.data).__module__}.{type(queue_0.data).__qualname__}"
        == "array.array"
    )
    assert len(queue_0.data) == 1
    bool_1 = queue_0.full()
    assert bool_1 is False
    queue_1 = module_0.Queue(bool_0)
    assert queue_1.head == 0
    assert queue_1.tail == 0
    assert queue_1.size == 0
    bool_2 = queue_1.full()
    assert bool_2 is False
    var_0 = queue_1.dequeue()
    var_1 = queue_1.dequeue()


def test_case_5():
    int_0 = 651
    queue_0 = module_0.Queue(int_0)
    assert f"{type(queue_0).__module__}.{type(queue_0).__qualname__}" == "example.Queue"
    assert queue_0.max == 651
    assert queue_0.head == 0
    assert queue_0.tail == 0
    assert queue_0.size == 0
    assert (
        f"{type(queue_0.data).__module__}.{type(queue_0.data).__qualname__}"
        == "array.array"
    )
    assert len(queue_0.data) == 651
    bool_0 = queue_0.empty()
    assert bool_0 is False
    bool_1 = queue_0.empty()
    assert bool_1 is False
    int_1 = 538
    queue_1 = module_0.Queue(int_1)
    assert queue_1.head == 0
    assert queue_1.tail == 0
    assert queue_1.size == 0
    bool_2 = queue_1.empty()
    assert bool_2 is False
    bool_3 = queue_1.full()
    assert bool_3 is False
    var_0 = queue_0.dequeue()
    bool_4 = False
    bool_5 = queue_0.enqueue(bool_4)
    assert bool_5 is True
    assert queue_0.tail == 1
    assert queue_0.size == 1
    bool_6 = queue_0.empty()
    assert bool_6 is True
    queue_2 = module_0.Queue(int_1)
    assert queue_2.head == 0
    assert queue_2.tail == 0
    assert queue_2.size == 0
    bool_7 = queue_1.empty()
    assert bool_7 is False


def test_case_6():
    bool_0 = False
    bool_1 = True
    queue_0 = module_0.Queue(bool_1)
    assert f"{type(queue_0).__module__}.{type(queue_0).__qualname__}" == "example.Queue"
    assert queue_0.max is True
    assert queue_0.head == 0
    assert queue_0.tail == 0
    assert queue_0.size == 0
    assert (
        f"{type(queue_0.data).__module__}.{type(queue_0.data).__qualname__}"
        == "array.array"
    )
    assert len(queue_0.data) == 1
    bool_2 = queue_0.enqueue(bool_0)
    assert bool_2 is True
    assert queue_0.size == 1
    var_0 = queue_0.dequeue()
    assert var_0 == 0
    assert queue_0.size == 0
    bool_3 = False
    with pytest.raises(AssertionError):
        module_0.Queue(bool_3)


def test_case_7():
    bool_0 = True
    queue_0 = module_0.Queue(bool_0)
    assert f"{type(queue_0).__module__}.{type(queue_0).__qualname__}" == "example.Queue"
    assert queue_0.max is True
    assert queue_0.head == 0
    assert queue_0.tail == 0
    assert queue_0.size == 0
    assert (
        f"{type(queue_0.data).__module__}.{type(queue_0.data).__qualname__}"
        == "array.array"
    )
    assert len(queue_0.data) == 1
    bool_1 = queue_0.full()
    assert bool_1 is False
    queue_1 = module_0.Queue(bool_0)
    assert queue_1.head == 0
    assert queue_1.tail == 0
    assert queue_1.size == 0
    var_0 = queue_1.dequeue()
    bool_2 = queue_1.empty()
    assert bool_2 is False
    var_1 = queue_1.dequeue()
    bool_3 = queue_1.enqueue(bool_1)
    assert bool_3 is True
    assert queue_1.size == 1
    int_0 = -194
    bool_4 = queue_0.enqueue(int_0)
    assert bool_4 is True
    assert queue_0.size == 1


def test_case_8():
    int_0 = 651
    queue_0 = module_0.Queue(int_0)
    assert f"{type(queue_0).__module__}.{type(queue_0).__qualname__}" == "example.Queue"
    assert queue_0.max == 651
    assert queue_0.head == 0
    assert queue_0.tail == 0
    assert queue_0.size == 0
    assert (
        f"{type(queue_0.data).__module__}.{type(queue_0.data).__qualname__}"
        == "array.array"
    )
    assert len(queue_0.data) == 651
    bool_0 = queue_0.empty()
    assert bool_0 is False
    bool_1 = queue_0.empty()
    assert bool_1 is False
    int_1 = 538
    queue_1 = module_0.Queue(int_1)
    assert queue_1.head == 0
    assert queue_1.tail == 0
    assert queue_1.size == 0
    bool_2 = queue_1.empty()
    assert bool_2 is False
    bool_3 = queue_0.empty()
    assert bool_3 is False
    bool_4 = True
    bool_5 = queue_1.enqueue(bool_4)
    assert bool_5 is True
    assert queue_1.tail == 1
    assert queue_1.size == 1
    var_0 = queue_1.dequeue()
    assert var_0 == 1
    assert queue_1.head == 1
    assert queue_1.size == 0
    bool_6 = queue_0.enqueue(bool_5)
    assert bool_6 is True
    assert queue_0.tail == 1
    assert queue_0.size == 1


def test_case_9():
    bool_0 = True
    queue_0 = module_0.Queue(bool_0)
    assert f"{type(queue_0).__module__}.{type(queue_0).__qualname__}" == "example.Queue"
    assert queue_0.max is True
    assert queue_0.head == 0
    assert queue_0.tail == 0
    assert queue_0.size == 0
    assert (
        f"{type(queue_0.data).__module__}.{type(queue_0.data).__qualname__}"
        == "array.array"
    )
    assert len(queue_0.data) == 1
    bool_1 = queue_0.full()
    assert bool_1 is False
    queue_1 = module_0.Queue(bool_0)
    assert queue_1.head == 0
    assert queue_1.tail == 0
    assert queue_1.size == 0
    var_0 = queue_1.dequeue()
    bool_2 = queue_1.empty()
    assert bool_2 is False
    var_1 = queue_1.dequeue()
    bool_3 = queue_1.enqueue(bool_1)
    assert bool_3 is True
    assert queue_1.size == 1
    bool_4 = queue_1.enqueue(bool_3)
    assert bool_4 is False
    int_0 = 477
    queue_2 = module_0.Queue(int_0)
    assert queue_2.head == 0
    assert queue_2.size == 0
    bool_5 = queue_2.empty()
    assert bool_5 is False
